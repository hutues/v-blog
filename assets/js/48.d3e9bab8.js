(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{462:function(a,t,s){"use strict";s.r(t);var n=s(62),e=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"java泛型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java泛型"}},[a._v("#")]),a._v(" Java泛型")]),a._v(" "),s("h2",{attrs:{id:"泛型需要了解哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛型需要了解哪些"}},[a._v("#")]),a._v(" 泛型需要了解哪些？")]),a._v(" "),s("p",[s("img",{attrs:{src:"/v-blog/img/java/middle-java/jdk/genric/JAVA%E6%B3%9B%E5%9E%8B.png",alt:"JAVA泛型"}})]),a._v(" "),s("h3",{attrs:{id:"泛型类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛型类"}},[a._v("#")]),a._v(" 泛型类")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FanxingClass")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),a._v(" t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Fanxing")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),a._v(" t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("t "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n  \n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 这个并不是泛型方法，只是一个使用了泛型的泛型类的成员方法")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("h3",{attrs:{id:"泛型接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛型接口"}},[a._v("#")]),a._v(" 泛型接口")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("interface")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FanXingIterface")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n  \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("h3",{attrs:{id:"泛型方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛型方法"}},[a._v("#")]),a._v(" 泛型方法")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),a._v(" get\n")])])]),s("h3",{attrs:{id:"泛型通配符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛型通配符"}},[a._v("#")]),a._v(" 泛型通配符")]),a._v(" "),s("p",[a._v("​\t<?>                       无限制通配符")]),a._v(" "),s("p",[a._v("​\t<? extends T>    上限通配符")]),a._v(" "),s("p",[a._v("​    <? super T>        下限通配符")]),a._v(" "),s("h3",{attrs:{id:"泛型擦除技术"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛型擦除技术"}},[a._v("#")]),a._v(" 泛型擦除技术")]),a._v(" "),s("p",[a._v("​\t基本擦除 -> 直接替换成Object")]),a._v(" "),s("p",[a._v("​\t有界擦除 -> 替换成上界")]),a._v(" "),s("p",[a._v("​\t桥接方式 -> 方法内部实现")]),a._v(" "),s("h2",{attrs:{id:"泛型技术"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛型技术"}},[a._v("#")]),a._v(" 泛型技术")]),a._v(" "),s("h3",{attrs:{id:"泛型的引入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛型的引入"}},[a._v("#")]),a._v(" 泛型的引入")]),a._v(" "),s("p",[a._v("泛型是什么？")]),a._v(" "),s("ul",[s("li",[a._v("参数化类型， 类型参数")])]),a._v(" "),s("p",[a._v("为什么要使用泛型？")]),a._v(" "),s("ul",[s("li",[a._v("提高了代码的复用性")]),a._v(" "),s("li",[a._v("提高程序的可读性和安全性")])]),a._v(" "),s("p",[a._v("如何使用泛型？")]),a._v(" "),s("ul",[s("li",[a._v("泛型类")]),a._v(" "),s("li",[a._v("泛型方法")]),a._v(" "),s("li",[a._v("泛型通配符")])]),a._v(" "),s("p",[a._v("集合是一个容器，可以保存对象。集合中是可以保存任意类型的对象。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("List")]),a._v(" list "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ArrayList")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nlist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("“abc”"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//保存的是字符串对象")]),a._v("\nlist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//保存的是Integer对象")]),a._v("\n")])])]),s("p",[a._v("​\t\t如果使用原生类型，那么对象保存到集合中，都会被提升成Object类型。取出的一定也是Object类型，就发生多态了。如要使用保存的对象的特有方法或者属性时，需向下转型(有风险)。还得使用 instanceof关键字进行判断，使用起来相对麻烦。")]),a._v(" "),s("p",[a._v("​\t\t而数组这类容器在定义好之后，类型就已经确定，如果保存的数据类型不一致，编译直接报错。数组是个容器，集合也是容器，数组可以在编译的时候就能检测数保存的数据类型有问题，如果我们在定义集合的时候，也让集合中的数据类型进行限定，然后在编译的时候，如果类型不匹配就不让编译通过， 那么运行的时候也就不会发生ClassCastException。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("\t要做到在向集合中存储数据的时候限定集合中的数据类型，也就是说编译的时候会检测错误。java中从JDK1.5后提供了一个新的技术，可以解决这个问题：**泛型技术**。\n")])])]),s("h3",{attrs:{id:"泛型技术介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛型技术介绍"}},[a._v("#")]),a._v(" 泛型技术介绍")]),a._v(" "),s("p",[a._v("泛型的格式： <具体的数据类型>")]),a._v(" "),s("p",[a._v("使用格式： ArrayList<限定集合中的数据类型> list = new ArrayList<限定集合中的数据类型>();")]),a._v(" "),s("p",[a._v("说明：给集合加泛型，就是让集合中只能保存具体的某一种数据类型。")]),a._v(" "),s("p",[s("strong",[a._v("小结：")])]),a._v(" "),s("p",[a._v("一、 泛型的好处？")]),a._v(" "),s("p",[a._v("1）解决了集合中存储数据的不安全性；")]),a._v(" "),s("p",[a._v("2）把运行时可能发生的异常，放在编译时作为编译错误处理了，避免了运行时的异常；")]),a._v(" "),s("p",[a._v("3）省略了代码中的强制类型转换的书写；")]),a._v(" "),s("p",[a._v("二、注意事项：")]),a._v(" "),s("p",[a._v("1）泛型只支持引用数据类型(类类型或接口类型等)，泛型不支持基本数据类型：")]),a._v(" "),s("p",[a._v("2）泛型不支持数据类型以继承的形式存在，要求前后泛型的数据类型必须一致：")]),a._v(" "),s("p",[a._v("3）在jdk1.7后的类型推断, 泛型也可用如下写法："),s("code",[a._v("ArrayList<String> list = new ArrayList<>()")])]),a._v(" "),s("p",[a._v("4）泛型兼容老版本，但是尽量避免，不建议的写法："),s("code",[a._v("ArrayList<String> list = new ArrayList()")])]),a._v(" "),s("p",[s("strong",[a._v("注意：现在的开发中，泛型已经成为编写代码的规范。")])]),a._v(" "),s("h3",{attrs:{id:"类型擦除技术"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型擦除技术"}},[a._v("#")]),a._v(" 类型擦除技术")]),a._v(" "),s("p",[a._v("泛型是Java 1.5版本才引进的概念，在这之前是没有泛型的，但是，泛型代码能够很好地和之前版本的代码兼容。那是因为，泛型信息只存在于代码编译阶段，在进入JVM之前，与泛型相关的信息会被擦除掉，我们称之为--类型擦除。")]),a._v(" "),s("p",[a._v("无限制类型擦除：")]),a._v(" "),s("p",[s("img",{attrs:{src:"/v-blog/img/java/middle-java/jdk/genric/image-20200418110448595.png",alt:"image-20200418110448595"}})]),a._v(" "),s("p",[a._v("有限制类型擦除：")]),a._v(" "),s("p",[s("img",{attrs:{src:"/v-blog/img/java/middle-java/jdk/genric/image-20200418110511025.png",alt:"image-20200418110511025"}})]),a._v(" "),s("p",[a._v("擦除方法中定义的类型参数：")]),a._v(" "),s("p",[s("img",{attrs:{src:"/v-blog/img/java/middle-java/jdk/genric/image-20200418110605919.png",alt:"image-20200418110605919"}})]),a._v(" "),s("p",[a._v("桥接方法：")]),a._v(" "),s("p",[s("img",{attrs:{src:"/v-blog/img/java/middle-java/jdk/genric/image-20200418110638956.png",alt:"image-20200418110638956"}})]),a._v(" "),s("h2",{attrs:{id:"自定义泛型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自定义泛型"}},[a._v("#")]),a._v(" 自定义泛型")]),a._v(" "),s("h3",{attrs:{id:"泛型的定义介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛型的定义介绍"}},[a._v("#")]),a._v(" 泛型的定义介绍")]),a._v(" "),s("p",[a._v("​\t\t在集合中，不管是接口还是类，它们在定义的时候类或接口名的后面都使用<标识符>，当我们在使用的时候，可以指定其中的类型。")]),a._v(" "),s("p",[a._v("泛型自定义格式：<标识符>")]),a._v(" "),s("p",[a._v("​       这里的标识符可以是任意的字母、数字、下划线和 $ 。但是这里一般规范使用单个大写字母。")]),a._v(" "),s("p",[a._v("注意：自定义泛型也属于标识符，满足标识符的命名规则。1）数字不能开始；2）关键字不能作为标识符；")]),a._v(" "),s("h3",{attrs:{id:"自定义泛型类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自定义泛型类"}},[a._v("#")]),a._v(" 自定义泛型类")]),a._v(" "),s("p",[a._v("泛型类：  在定义类的时候，在类名的后面书写泛型。")]),a._v(" "),s("p",[a._v("格式：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" 类名"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("泛型参数"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 泛型参数其实就是标识符。")]),a._v("\n")])])]),s("p",[a._v("说明：")]),a._v(" "),s("p",[a._v("1）在类上定义的泛型，在创建这个类的对象的时候，需要创建者自己来明确当前泛型的具体类型；")]),a._v(" "),s("p",[a._v("2）在类上定义的泛型，在类中的方法上和成员变量是可以使用的；")]),a._v(" "),s("p",[a._v("3）如果创建类的对象时没有指定泛型类型，默认是Object类型，指定了就是指定的类型；")]),a._v(" "),s("h3",{attrs:{id:"泛型方法-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛型方法-2"}},[a._v("#")]),a._v(" 泛型方法")]),a._v(" "),s("p",[a._v("​\t\t虽然可以在类上定义泛型，但是有时类中的方法需要接收的数据类型和类上外界指定的类型不一致。也就是说对于某个函数而言参数的数据类型和所属类的泛型类型不一致了，这时我们可以在这个类中的这个方法上单独给这个方法设定泛型。")]),a._v(" "),s("p",[a._v("在函数上使用泛型的格式：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v(" 函数修饰符 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("泛型名"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("  函数返回值类型 方法名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v(" 泛型名 变量名 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" \n   函数体"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),a._v(" t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// do something")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("说明：函数返回值类型前面的<泛型名>相当于定义了方法参数列表中泛型的类型。")]),a._v(" "),s("p",[a._v("总结：")]),a._v(" "),s("p",[a._v("​    1）自定义泛型方法格式："),s("code",[a._v("修饰符 <泛型> 返回值 函数名(参数列表 ){}")])]),a._v(" "),s("p",[a._v("​    2）自定义泛型方法，泛型必须在函数返回值之前和函数修饰之后定义，否则报错；")]),a._v(" "),s("p",[a._v("​    3）泛型方法中泛型的确定：在方法被调用的时候，传递参数的时候才确定；")]),a._v(" "),s("p",[a._v("注意事项：")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("静态方法上的泛型：静态方法不能使用类上定义的泛型。（请使用自定义泛型方法）")])]),a._v(" "),s("li",[s("p",[a._v("因为静态方法运行不需要对象，而类上的泛型必须在创建这个类对象的时候才能明确具体是什么类型。")])]),a._v(" "),s("li",[s("p",[a._v("而静态函数运行的时候是没有对象的，也就是说类上的泛型在静态函数运行的时候还不知道是什么类型。")])])]),a._v(" "),s("h3",{attrs:{id:"泛型接口和泛型传递"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛型接口和泛型传递"}},[a._v("#")]),a._v(" 泛型接口和泛型传递")]),a._v(" "),s("p",[a._v("通过查阅API得知，类支持泛型，那么接口也可以支持泛型，比如集合中的接口。")]),a._v(" "),s("p",[a._v("泛型接口的格式：")]),a._v(" "),s("p",[a._v("修饰符 interface 接口名<泛型>{}")]),a._v(" "),s("p",[a._v("泛型是支持传递的。")]),a._v(" "),s("h3",{attrs:{id:"泛型通配符-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛型通配符-2"}},[a._v("#")]),a._v(" 泛型通配符")]),a._v(" "),s("p",[a._v("? 表示任意类型。")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("用于方法的形参上。")])]),a._v(" "),s("li",[s("p",[a._v("解决集合中不可协变的问题(数组可以协变，类似于多态)。")])])]),a._v(" "),s("p",[a._v("注意：泛型的通配符虽可简化代码的开发，但开发中要慎用，如果用通配符，函数就可接收任意数据类型，会导致代码不安全。如果想使用泛型的通配符必须使用通配符的限定。目的是考虑数据的安全性。")]),a._v(" "),s("h3",{attrs:{id:"泛型限定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛型限定"}},[a._v("#")]),a._v(" 泛型限定")]),a._v(" "),s("p",[a._v("解决集合中不可协变的问题(数组可以协变，类似于多态)")]),a._v(" "),s("h4",{attrs:{id:"上限限定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#上限限定"}},[a._v("#")]),a._v(" 上限限定")]),a._v(" "),s("p",[a._v("上限限定的格式：<？ extends 父类类型或父接口类型>")]),a._v(" "),s("p",[a._v("例如：<？ extends Person> ：")]),a._v(" "),s("p",[a._v("？代表的是一种类型，当前这个类型可以是Person本身，也可以是Person的子类。")]),a._v(" "),s("h4",{attrs:{id:"下限限定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#下限限定"}},[a._v("#")]),a._v(" 下限限定")]),a._v(" "),s("p",[a._v("下限限定格式： <？ super 子类类型或实现类类型>")]),a._v(" "),s("p",[a._v("例如：< ？ super Student >：")]),a._v(" "),s("p",[a._v("？代表当前的类型可以是Student类型，也可以是Student的父类类型。")]),a._v(" "),s("p",[a._v("但不能是Student 的子类，或者Student的兄弟。")]),a._v(" "),s("h4",{attrs:{id:"阿里规约泛型限制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#阿里规约泛型限制"}},[a._v("#")]),a._v(" 阿里规约泛型限制")]),a._v(" "),s("p",[a._v("【强制】泛型通配符<?extendsT>来接收返回的数据，此写法的泛型集合不能使用add方 法，而<? super T>不能使用 get 方法，作为接口调用赋值时易出错。\n说明:扩展说一下 PECS(Producer Extends Consumer Super)原则:第一、频繁往外读取内容的，适合 用<? extends T>。第二、经常往里插入的，适合用<? super T>")]),a._v(" "),s("p",[a._v("【强制】在无泛型限制定义的集合赋值给泛型限制的集合时，在使用集合元素时，需要进行 instanceof 判断，避免抛出 ClassCastException 异常。\n说明:毕竟泛型是在 JDK5 后才出现，考虑到向前兼容，编译器是允许非泛型集合与泛型集合互相赋值。")])])}),[],!1,null,null,null);t.default=e.exports}}]);